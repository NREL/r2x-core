name: Release
permissions:
  contents: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      base_bump:
        description: "Select base version bump (major, minor, patch)"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

      prerelease:
        description: "Optional: Add a pre-release tag (dev, alpha, beta, rc)"
        required: false
        type: choice
        default: ""
        options:
          - ""
          - dev
          - alpha
          - beta
          - rc

      release_name:
        description: "Optional: Release Name"
        required: false
        type: string

      release_body:
        description: "Optional: Release Body"
        required: false
        type: string

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      BASE_BUMP: ${{ steps.release_type.outputs.BASE_BUMP  }}
      PRERELEASE: ${{ steps.release_type.outputs.PRERELEASE  }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine version bump
        if: github.event_name == 'workflow_dispatch'
        id: release_type
        run: |
          echo "BASE_BUMP=${{ github.event.inputs.base_bump }}" >> $GITHUB_OUTPUT
          echo "PRERELEASE=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT

  bumpversion:
    needs: determine-version
    runs-on: "ubuntu-latest"
    outputs:
      version: ${{ steps.version.outputs.version  }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Bump version using UV
        id: version
        run: |
          BASE_BUMP="${{ needs.determine-version.outputs.BASE_BUMP }}"
          PRERELEASE="${{ needs.determine-version.outputs.PRERELEASE }}"

          if [[ -n "$PRERELEASE" ]]; then
            echo "Creating pre-release: bumping $BASE_BUMP + $PRERELEASE"
            uv version --bump "$BASE_BUMP" --bump "$PRERELEASE"
          else
            echo "Creating standard release: bumping $BASE_BUMP"
            uv version --bump "$BASE_BUMP"
          fi

          echo "NEW_VERSION=$(uv version --short)" >> $GITHUB_ENV
          echo "version=$(uv version --short)" >> $GITHUB_OUTPUT

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: --verbose
        env:
          OUTPUT: docs/source/CHANGELOG.md

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import-gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASS }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_config_global: true

      - name: Adding changes
        run: git add pyproject.toml docs/source/CHANGELOG.md

      - name: Commit new version
        shell: bash
        run: |
          git config commit.gpgsign true
          git config --global user.email "${{ steps.import-gpg.outputs.email }}"
          git config --global user.name "${{ steps.import-gpg.outputs.name }}"
          git commit -S -m "Bump version to v${{ env.NEW_VERSION}}"
          git tag -s v${{ env.NEW_VERSION }} -m "Release version ${{ env.NEW_VERSION }}"
          git push origin ${{ github.ref }} --tags

      - name: Build package
        run: |
          uv build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-testpypi:
    needs:
      - bumpversion
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/r2x-core
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    needs:
      - bumpversion
      - publish-testpypi
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/r2x-core
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
      - bumpversion
      - publish-pypi
    runs-on: ubuntu-latest

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          "v${{ needs.bumpversion.outputs.version }}"
          --repo "$GITHUB_REPOSITORY"
          --generate-notes
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          "v${{ needs.bumpversion.outputs.version }}" dist/**
          --repo "$GITHUB_REPOSITORY"
